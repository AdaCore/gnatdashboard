------------------------------------------------------------------------------
--                               G N A T h u b                              --
--                                                                          --
--                     Copyright (C) 2013-2020, AdaCore                     --
--                                                                          --
-- This is free software;  you can redistribute it  and/or modify it  under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
-- sion.  This software is distributed in the hope  that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for  more details.  You should have  received  a copy of the GNU --
-- General  Public  License  distributed  with  this  software;   see  file --
-- COPYING3.  If not, go to http://www.gnu.org/licenses for a complete copy --
-- of the license.                                                          --
------------------------------------------------------------------------------

with Ada.Containers.Hashed_Maps;
with Ada.Containers;                      use Ada.Containers;
with Ada.Strings;
with Ada.Strings.Unbounded.Hash;
with Ada.Strings.Equal_Case_Insensitive;

with Database.Orm;                        use Database.Orm;

with GNAT.Source_Info;

with GNATCOLL.Traces;                     use GNATCOLL.Traces;
with GNATCOLL.VFS_Utils;                  use GNATCOLL.VFS_Utils;

with GNATCOLL.SQL.Sessions; use GNATCOLL.SQL.Sessions;

with GNAThub.Configuration;
with GNAThub.Database;                    use GNAThub.Database;

package body GNAThub.Project is
   Me : constant Trace_Handle := Create (GNAT.Source_Info.Enclosing_Entity);

   Project_Tree : GNATCOLL.Projects.Project_Tree;
   Project_Env  : Project_Environment_Access;
   --  GNATCOLL.Projects specificities

   Scenario_Variables : Scenario_Variables_Vector.Vector;
   --  The scenario variables passed on the command line

   package Project_Map is new Ada.Containers.Hashed_Maps
     (Key_Type        => Unbounded_String,
      Element_Type    => Detached_Resource,
      Hash            => Ada.Strings.Unbounded.Hash,
      Equivalent_Keys => "=");
   use Project_Map;

   Is_Initialized    : Boolean := False;
   --  False until Initialize is called

   Is_Project_Loaded : Boolean := False;
   --  False until Load_Project_Tree is called

   procedure Register_Custom_Attributes;
   --  Register GNATdashboard-specific attributes

   procedure Save_Project_Sources
     (Project     : Project_Type;
      Project_Orm : Detached_Resource;
      Session     : Session_Type);
   --  Save source files and directories associated with a project.
   --  Session: The database session in which the requests will be made.

   procedure Project_Errors (Msg : String);
   --  Procedure to use for GNATCOLL.Projects.Load Errors argument. Use this
   --  procedure to display errors and warnings generated by the Project
   --  API.

   --------------------
   -- Project_Errors --
   --------------------

   procedure Project_Errors (Msg : String) is
   begin
      Info (Msg, New_Line => False);
   end Project_Errors;

   ------------
   -- Loaded --
   ------------

   function Loaded return Boolean is
   begin
      return Is_Project_Loaded;
   end Loaded;

   -----------------
   -- Initialized --
   -----------------

   function Initialized return Boolean is
   begin
      return Is_Initialized;
   end Initialized;

   ----------
   -- Name --
   ----------

   function Name return String is
   begin
      return Project_Tree.Root_Project.Name;
   end Name;

   -------------------
   -- Artifacts_Dir --
   -------------------

   function Artifacts_Dir return Virtual_File is
      Dir : Virtual_File := Project_Tree.Root_Project.Artifacts_Dir;
   begin

      if GNAThub.Configuration.Subdirs /= "" then
         Dir := Dir.Sub_Dir
           (Filesystem_String (GNAThub.Configuration.Subdirs));

         if Dir = No_File then
            --  The subdir doesn't exist => create it
            Dir := Project_Tree.Root_Project.Artifacts_Dir;
            Dir.Create_From_Dir
              (Filesystem_String (GNAThub.Configuration.Subdirs)).Make_Dir;
            Dir := Dir.Sub_Dir
              (Filesystem_String (GNAThub.Configuration.Subdirs));
         end if;
      end if;

      return Dir;
   end Artifacts_Dir;

   ----------------
   -- Object_Dir --
   ----------------

   function Object_Dir return Virtual_File is
      Dir : Virtual_File := Project_Tree.Root_Project.Object_Dir;
   begin

      if GNAThub.Configuration.Subdirs /= "" then
         Dir := Dir.Sub_Dir
           (Filesystem_String (GNAThub.Configuration.Subdirs));

         if Dir = No_File then
            --  The subdir doesn't exist => create it
            Dir := Project_Tree.Root_Project.Object_Dir;
            Dir.Create_From_Dir
              (Filesystem_String (GNAThub.Configuration.Subdirs)).Make_Dir;
            Dir := Dir.Sub_Dir
              (Filesystem_String (GNAThub.Configuration.Subdirs));
         end if;
      end if;

      return Dir;
   end Object_Dir;

   ----------
   -- Path --
   ----------

   function Path return Virtual_File is
   begin
      return Project_Tree.Root_Project.Project_Path;
   end Path;

   -----------------
   -- Project_Dir --
   -----------------

   function Project_Dir return Virtual_File is
   begin
      return Project_Tree.Root_Project.Project_Path.Dir;
   end Project_Dir;

   ------------------------------
   -- Project_Output_Directory --
   ------------------------------

   function Project_Output_Directory return Virtual_File is
      Prj        : constant Project_Type :=  Project_Tree.Root_Project;
      Output_Dir : Virtual_File := No_File;

      --  Codepeer "Output_Directory" attribute from .gpr
      Output_Dir_Str  : constant String := "output_directory";
      Output_Dir_Attr : constant Attribute_Pkg_String :=
        Build ("codepeer", Output_Dir_Str);
   begin
      if Prj.Has_Attribute (Output_Dir_Attr) then
         declare
            Dir : constant Filesystem_String :=
              Filesystem_String (Prj.Attribute_Value (Output_Dir_Attr));
         begin
            Output_Dir := Create_From_Base (Dir, Project_Dir.Full_Name.all);
         end;
      end if;

      return Output_Dir;
   end Project_Output_Directory;

   --------------------------------
   -- Project_Database_Directory --
   --------------------------------

   function Project_Database_Directory return Virtual_File is
      Prj    : constant Project_Type := Project_Tree.Root_Project;
      DB_Dir : Virtual_File := No_File;

      --  Codepeer "Database_Directory" attribute from .gpr
      Database_Dir_Str  : constant String := "database_directory";
      Database_Dir_Attr : constant Attribute_Pkg_String :=
        Build ("codepeer", Database_Dir_Str);
   begin
      if Prj.Has_Attribute (Database_Dir_Attr) then
         declare
            Dir : constant Filesystem_String :=
              Filesystem_String (Prj.Attribute_Value (Database_Dir_Attr));
         begin
            DB_Dir := Create_From_Base (Dir, Project_Dir.Full_Name.all);
         end;
      end if;

      return DB_Dir;
   end Project_Database_Directory;

   ------------
   -- Target --
   ------------

   function Target return String is
   begin
      if GNAThub.Configuration.Target /= "" then
         return GNAThub.Configuration.Target;
      end if;

      return Project_Tree.Root_Project.Get_Target;
   end Target;

   -------------
   -- Runtime --
   -------------

   function Runtime return String is
   begin
      if GNAThub.Configuration.Runtime /= "" then
         return GNAThub.Configuration.Runtime;
      end if;

      return Project_Tree.Root_Project.Get_Runtime;
   end Runtime;

   ------------------------
   -- Property_As_String --
   ------------------------

   function Property_As_String
     (Property     : String;
      Package_Name : String := GNATdashboard_Package;
      Index        : String := "") return String is
   begin
      return Project_Tree.Root_Project.Attribute_Value
               (Attribute_Pkg_String'(Build (Package_Name, Property)),
                Index   => Index,
                Default => "");
   end Property_As_String;

   ----------------------
   -- Property_As_List --
   ----------------------

   function Property_As_List
     (Property     : String;
      Package_Name : String := GNATdashboard_Package;
      Index        : String := "") return String_List_Access is
   begin
      return Project_Tree.Root_Project.Attribute_Value
               (Attribute_Pkg_List'(Build (Package_Name, Property)),
                Index => Index);
   end Property_As_List;

   --------------------------------
   -- Register_Custom_Attributes --
   --------------------------------

   procedure Register_Custom_Attributes is
      procedure Internal_Register (Key : String; Is_List : Boolean := False);
      --  Register an attribute in the Dashboard package

      procedure Internal_Register (Key : String; Is_List : Boolean := False) is
         Ret : constant String :=
                 Register_New_Attribute
                   (Name    => Key,
                    Pkg     => GNATdashboard_Package,
                    Is_List => Is_List);
      begin
         if Ret /= "" then
            raise Project_Error with
              "Failed to register custom attribute " & Key;
         end if;

         Trace (Me, "  + " & Key);
      end Internal_Register;

   begin
      Internal_Register ("Project_Name");
      Internal_Register ("Project_Version");
      Internal_Register ("Project_Key");

      Internal_Register ("Source_Encoding");

      Internal_Register ("Local_Repository");

      Internal_Register ("Plugins", Is_List => True);
      Internal_Register ("Plugins_Off", Is_List => True);
   end Register_Custom_Attributes;

   ----------------
   -- Initialize --
   ----------------

   procedure Initialize is
   begin
      Trace (Me, "Initialize project loader");
      GNATCOLL.Projects.Initialize (Project_Env);

      Trace (Me, "Register custom GNATdashboard package attributes");
      Register_Custom_Attributes;

      Is_Initialized := True;
   end Initialize;

   ---------
   -- Load--
   ---------

   procedure Load (Path : String)
   is
      Project_File : constant Virtual_File := GNATCOLL.VFS.Create (+Path);
   begin
      Trace (Me, "Load project file " & Path);

      if GNAThub.Configuration.Target /= "" then
         Project_Env.Set_Target_And_Runtime
           (Target => GNAThub.Configuration.Target);
      end if;

      Project_Tree.Load
        (Root_Project_Path => Project_File,
         Env               => Project_Env,
         Errors            => Project_Errors'Access);

      Is_Project_Loaded := True;

      Trace (Me, "Project """ & Name & """ loaded");
   exception
      when Invalid_Project =>
         --  Errors are already printed on the standard error stream
         raise Fatal_Error with "Failed to load project file: " & Path;

   end Load;

   ----------------------------
   -- Get_Scenario_Variables --
   ----------------------------

   function Get_Scenario_Variables return Scenario_Variables_Vector.Vector is
   begin
      return Scenario_Variables;
   end Get_Scenario_Variables;

   ----------------
   -- Update_Env --
   ----------------

   procedure Update_Env (Key, Value : String) is
   begin
      Trace (Me, "Update project environment: " & Key & " = " & Value);
      Project_Env.Change_Environment (Key, Value);

      --  Store the scenario variable that was parsed
      Scenario_Variables.Append
        ((To_Unbounded_String (Key), To_Unbounded_String (Value)));
   end Update_Env;

   ----------
   -- File --
   ----------

   function File (Name : String) return Virtual_File
   is
      File : constant Virtual_File := Project_Tree.Create (Base_Name (+Name));
   begin
      if File = No_File then
         return Create (Full_Filename => +Name);
      end if;

      return File;
   end File;

   ------------------
   -- All_Projects --
   ------------------

   function All_Projects return Project_Vectors.Vector is
      Iterator : Project_Iterator := Project_Tree.Root_Project.Start;
   begin
      return Projects : Project_Vectors.Vector do
         loop
            declare
               Project : constant Project_Type := Current (Iterator);
            begin
               exit when Project = No_Project;

               Projects.Append (Project);
               Next (Iterator);
            end;
         end loop;
      end return;
   end All_Projects;

   ----------
   -- Tree --
   ----------

   function Tree return GNATCOLL.Projects.Project_Tree is
   begin
      return Project_Tree;
   end Tree;

   --------------------------
   -- Save_Project_Sources --
   --------------------------

   procedure Save_Project_Sources
     (Project     : Project_Type;
      Project_Orm : Detached_Resource;
      Session     : Session_Type)
   is
      Directory_Orm : Detached_Resource;
      File_Orm      : Detached_Resource;
      Files         : File_Array_Access;

   begin
      Trace (Me, "Save project sources: " & Project.Name);

      --  Initialisation
      Files := Project.Source_Files;
      Directory_Orm := No_Detached_Resource;

      for F in Files'Range loop
         --  Save source directory
         if (not (Directory_Orm = No_Detached_Resource)
             and then not Ada.Strings.Equal_Case_Insensitive
               (Directory_Orm.Name, Files (F).Display_Dir_Name))
           or else
             Directory_Orm = No_Detached_Resource
         then
            --  Save source directory and tree.
            Directory_Orm := Create_And_Save_Resource
              (Name => Files (F).Display_Dir_Name,
               Kind => Kind_Directory,
               Session => Session);
            Save_Resource_Tree (Directory_Orm, Project_Orm, Session);

            Trace (Me, "New source directory: " & Files (F).Display_Dir_Name);
         end if;

         --  Save source file, and source tree
         File_Orm := Create_And_Save_Resource
           (Name => Files (F).Display_Full_Name,
            Kind => Kind_File,
            Session => Session);
         Save_Resource_Tree (File_Orm, Directory_Orm, Session);

         Trace (Me, "New source file: " & Files (F).Display_Full_Name);
      end loop;
   end Save_Project_Sources;

   -----------------------
   -- Save_Project_Tree --
   -----------------------

   procedure Save_Project_Tree is
      Project_Orm_By_Name : Project_Map.Map;
      Iterator            : Project_Iterator;
      Project             : Project_Type;
      Project_Orm         : Detached_Resource;
      Parent_Iterator     : Project_Iterator;
      Parent_Project      : Project_Type;
      Parent_Project_Orm  : Detached_Resource;

      function Get_Project_Orm
        (Project : Project_Type;
         Session : Session_Type) return Detached_Resource;

      ---------------------
      -- Get_Project_Orm --
      ---------------------

      function Get_Project_Orm
        (Project : Project_Type;
         Session : Session_Type) return Detached_Resource
      is
         Orm            : Detached_Resource;
         Project_Cursor : Project_Map.Cursor;
      begin
         Project_Cursor := Project_Orm_By_Name.Find
           (To_Unbounded_String (Project.Name));

         --  Check if project was in the Map, if not create it and
         --  add it to the map
         if Project_Cursor = Project_Map.No_Element then
            Orm := Create_And_Save_Resource (Name => Project.Name,
                                             Kind => Kind_Project,
                                             Session => Session);
            Project_Orm_By_Name.Insert
              (Key => To_Unbounded_String (Project.Name),
               New_Item => Orm);
         else
            Orm := Project_Orm_By_Name (Project_Cursor);
         end if;

         return Orm;
      end Get_Project_Orm;

   begin
      --  All projects
      Iterator := Project_Tree.Root_Project.Start;

      declare
         Session : constant Session_Type := Get_New_Session;
      begin
         loop
            Project := Current (Iterator);
            exit when Project = No_Project;

            --  Retrieve Project DB object representation
            Project_Orm := Get_Project_Orm (Project, Session);

            --  All parents' current project
            Parent_Iterator := Project.Find_All_Projects_Importing
              (Direct_Only => True);

            --  Save Root project, with no parent
            if Current (Parent_Iterator) = No_Project then
               Save_Resource_Tree (Child => Project_Orm,
                                   Parent => No_Detached_Resource,
                                   Session => Session);
            else
               loop
                  Parent_Project := Current (Parent_Iterator);
                  exit when Parent_Project = No_Project;

                  Parent_Project_Orm := Get_Project_Orm
                    (Parent_Project, Session);
                  Save_Resource_Tree
                    (Project_Orm, Parent_Project_Orm, Session);

                  Next (Parent_Iterator);
               end loop;
            end if;

            --  Save Project's source directories and files
            Save_Project_Sources (Project, Project_Orm, Session);

            Next (Iterator);
         end loop;

         Session.Commit;
      exception
         when E : others =>
            --  Make sure to close the session.
            Session.Commit;
            Trace (Me, E);
      end;
   end Save_Project_Tree;

   --------------
   -- Finalize --
   --------------

   procedure Finalize is
   begin
      if Loaded then
         Project_Tree.Unload;
         Is_Project_Loaded := False;

         GNATCOLL.Projects.Finalize;
      end if;
   end Finalize;

end GNAThub.Project;
