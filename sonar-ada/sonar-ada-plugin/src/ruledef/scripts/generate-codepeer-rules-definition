#! /usr/bin/env python

# Sonar Ada Plugin (GNATdashboard)
# Copyright (C) 2015, AdaCore
#
# This is free software;  you can redistribute it  and/or modify it  under
# terms of the  GNU General Public License as published  by the Free Soft-
# ware  Foundation;  either version 3,  or (at your option) any later ver-
# sion.  This software is distributed in the hope  that it will be useful,
# but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN-
# TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
# License for  more details.  You should have  received  a copy of the GNU
# General  Public  License  distributed  with  this  software;   see  file
# COPYING3.  If not, go to http://www.gnu.org/licenses for a complete copy
# of the license.

"""Generate :file:`codepeer.xml` containing the rules definition for CodePeer

SonarQube's plugin `sonar-ada-plugin` loads CodePeer rules by reading the XML
file in which they are defined. This script generates such XML file from
CodePeer documentation.
"""

import logging
import sys
from argparse import ArgumentParser, FileType

from sonarqube.rule import RulesDefinitionXmlWriter
from tools.codepeer import CodePeerRulesDefinition


def generate_codepeer_rules_repository():
    """Parse the command line and generate the XML file"""

    cmdline = ArgumentParser(description='Codepeer rules definition generator')
    cmdline.add_argument(
        'infile', metavar='messages-and-annotations-rst',
        help='path to the CodePeer user guide messages_and_annotations.rst')
    cmdline.add_argument(
        '-o', '--output', default=sys.stdout, dest='outfile',
        type=FileType('w'), help='output file')
    params = cmdline.parse_args()

    rules = CodePeerRulesDefinition.create_from_doc(params.infile)
    RulesDefinitionXmlWriter.write(rules, stream=params.outfile)
    return 0

if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )

    try:
        sys.exit(generate_codepeer_rules_repository())
    except KeyboardInterrupt:
        sys.exit('Interrupted.')
