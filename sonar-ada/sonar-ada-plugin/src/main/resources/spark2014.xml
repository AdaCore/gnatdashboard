<?xml version='1.0' encoding='UTF-8'?>
<rules>

    <rule>
            <key>critical_global_missing</key>
            <name>critically incomplete Global or Initializes contract</name>
            <description>A Global or Initializes contract fails to mention some objects.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-error</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>non_volatile_function_with_volatile_effects</key>
            <name>volatile function wrongly declared as non-volatile</name>
            <description>A volatile function wrongly declared as non-volatile.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-error</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>side_effects</key>
            <name>function with side effects</name>
            <description>A function with side effects.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-error</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>aliasing</key>
            <name>aliasing between subprogram parameters</name>
            <description>Aliasing between formal parameters or global objects.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>call_in_type_invariant</key>
            <name>invalid call in type invariant</name>
            <description>A type invariant calls a boundary subprogram for the type.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>call_to_current_task</key>
            <name>invalid context for call to Current_Task</name>
            <description>Current_Task is called from an invalid context.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>concurrent_access</key>
            <name>race condition</name>
            <description>An unsynchronized global object is accessed concurrently.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>default_initialization_mismatch</key>
            <name>wrong Default_Initial_Condition aspect</name>
            <description>A type is wrongly declared as initialized by default.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>depends_missing</key>
            <name>input item missing from the dependency clause</name>
            <description>An input is missing from the dependency clause.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>depends_missing_clause</key>
            <name>output item missing from the dependency clause</name>
            <description>An output item is missing from the dependency clause.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>depends_null</key>
            <name>input item missing from the null dependency clause</name>
            <description>An input item is missing from the null dependency clause.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>depends_wrong</key>
            <name>extra input item in the dependency clause</name>
            <description>Extra input item in the dependency clause.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>export_depends_on_proof_in</key>
            <name>subprogram output depends on a Proof_In global</name>
            <description>Subprogram output depends on a Proof_In global.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>ghost_wrong</key>
            <name>non-ghost output of ghost procedure</name>
            <description>A ghost procedure has a non-ghost global output.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>global_missing</key>
            <name>incomplete Global or Initializes contract</name>
            <description>A Global or Initializes contract fails to mention some objects.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>global_wrong</key>
            <name>an extra item in the Global or Initializes contract</name>
            <description>A Global or Initializes contract wrongly mentions some objects.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>hidden_unexposed_state</key>
            <name>constants with variable inputs that is not a state constituent</name>
            <description>Constants with variable inputs that are not state constituents.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>illegal_update</key>
            <name>illegal write of a global input</name>
            <description>Illegal write of a global input.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>initializes_wrong</key>
            <name>an extra item in the Initializes contract</name>
            <description>An object that shall not appear in the Initializes contract.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>missing_return</key>
            <name>all execution paths raise exceptions or do not return</name>
            <description>All execution paths raise exceptions or do not return.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>not_constant_after_elaboration</key>
            <name>illegal write of an object declared as constant after elaboration</name>
            <description>Illegal write of an object declared as constant after elaboration.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>potentially_blocking_in_protected</key>
            <name>protected operation blocks</name>
            <description>A protected operation may block.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>reference_to_non_cae_variable</key>
            <name>illegal reference to a global object in precondition of a protected operation</name>
            <description>An illegal reference to global in precondition of a protected operation.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>refined_state_wrong</key>
            <name>constant with no variable inputs as an abstract state's constituent</name>
            <description>Constant with no variable inputs as an abstract state's constituent.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>subprogram_termination</key>
            <name>subprogram marked Terminating may not terminate</name>
            <description>A subprogram with Terminating annotation may not terminate.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>uninitialized</key>
            <name>use of an uninitialized variable</name>
            <description>Flow analysis has detected the use of an uninitialized variable.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>unused_global</key>
            <name>global object is not used</name>
            <description>A global object is never used.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>dead_code</key>
            <name>dead code</name>
            <description>A statement is never executed.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>impossible_to_initialize_state</key>
            <name>a state abstraction that is impossible to initialize</name>
            <description>A state abstraction that is impossible to initialize.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>ineffective</key>
            <name>a statement with no effect on subprogram's outputs</name>
            <description>A statement with no effect on subprogram's outputs.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>inout_only_read</key>
            <name>an IN OUT parameter or an In_Out global that is not written</name>
            <description>An IN OUT parameter or an In_Out global that is not written.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>stable</key>
            <name>loop with stable statement</name>
            <description>A loop with stable statement.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>unused_variable</key>
            <name>object is not used</name>
            <description>A parameter or locally declared object is never used.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>unused_initial_value</key>
            <name>initial value of an object is not used</name>
            <description>The initial value of an object is not used.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>volatile_function_without_volatile_effects</key>
            <name>non-volatile function wrongly declared as volatile</name>
            <description>A non-volatile function wrongly declared as volatile.</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>flow-analysis-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_division_check</key>
            <name>divide by zero</name>
            <description>Check that the second operand of the division, mod or rem operation is different from zero.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_index_check</key>
            <name>index check</name>
            <description>Check that the given index is within the bounds of the array.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_overflow_check</key>
            <name>overflow check</name>
            <description>Check that the result of the given integer arithmetic operation is within the bounds of the base type.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_fp_overflow_check</key>
            <name>fp_overflow check</name>
            <description>Check that the result of the given floating point operation is within the bounds of the base type.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_range_check</key>
            <name>range check</name>
            <description>Check that the given value is within the bounds of the expected scalar subtype.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_predicate_check</key>
            <name>predicate check</name>
            <description>Check that the given value respects the applicable type predicate.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_predicate_check_on_default_value</key>
            <name>predicate check on default value</name>
            <description>Check that the default value for the type respects the applicable type predicate.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_null_pointer_dereference</key>
            <name>null pointer dereference</name>
            <description>Check that the given pointer is not null so that it can be dereferenced.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_null_exclusion</key>
            <name>null exclusion</name>
            <description>Check that the subtype_indication of the allocator does not specify a null_exclusion</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_memory_leak</key>
            <name>memory leak</name>
            <description>Check that the assignment does not lead to a memory leak</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_memory_leak_at_end_of_scope</key>
            <name>memory leak at end of scope</name>
            <description>Check that the declaration does not lead to a memory leak</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_length_check</key>
            <name>length check</name>
            <description>Check that the given array is of the length of the expected array subtype.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_discriminant_check</key>
            <name>discriminant check</name>
            <description>Check that the discriminant of the given discriminated record has the expected value. For variant records, this can happen for a simple access to a record field. But there are other cases where a fixed value of the discriminant is required.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_tag_check</key>
            <name>tag check</name>
            <description>Check that the tag of the given tagged object has the expected value.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_ceiling_interrupt</key>
            <name>ceiling priority in Interrupt_Priority</name>
            <description>Check that the ceiling priority specified for a protected object containing a procedure with an aspect Attach_Handler is in Interrupt_Priority.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_initialization_check</key>
            <name>use of an uninitialized variable</name>
            <description>Check that a variable is initialized</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_interrupt_reserved</key>
            <name>interrupt is reserved</name>
            <description>Check that the interrupt specified by Attach_Handler is not reserved.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_invariant_check</key>
            <name>invariant check</name>
            <description>Check that the given value respects the applicable type invariant.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_invariant_check_on_default_value</key>
            <name>invariant check on default value</name>
            <description>Check that the default value for the type respects the applicable type invariant.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_ceiling_priority_protocol</key>
            <name>ceiling priority protocol</name>
            <description>Check that the ceiling priority protocol is respected, i.e., when a task calls a protected operation, the active priority of the task is not higher than the priority of the protected object (Ada RM Annex D.3).</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_task_termination</key>
            <name>task termination</name>
            <description>Check that the task does not terminate, as required by Ravenscar.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>run-time-check</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_initial_condition</key>
            <name>initial condition</name>
            <description>Check that the initial condition of a package is true after elaboration.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_default_initial_condition</key>
            <name>default initial condition</name>
            <description>Check that the default initial condition of a type is true after default initialization of an object of the type.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_precondition</key>
            <name>precondition</name>
            <description>Check that the precondition aspect of the given call evaluates to True.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_precondition_main</key>
            <name>precondition of main</name>
            <description>Check that the precondition aspect of the given main procedure evaluates to True after elaboration.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_postcondition</key>
            <name>postcondition</name>
            <description>Check that the postcondition aspect of the subprogram evaluates to True.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_refined_post</key>
            <name>refined postcondition</name>
            <description>Check that the refined postcondition aspect of the subprogram evaluates to True.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_contract_case</key>
            <name>contract case</name>
            <description>Check that all cases of the contract case evaluate to true at the end of the subprogram.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_disjoint_contract_cases</key>
            <name>disjoint contract cases</name>
            <description>Check that the cases of the contract cases aspect are all mutually disjoint.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_complete_contract_cases</key>
            <name>complete contract cases</name>
            <description>Check that the cases of the contract cases aspect cover the state space that is allowed by the precondition aspect.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_loop_invariant</key>
            <name>loop invariant</name>
            <description>Check that the loop invariant evaluates to True on all iterations of the loop.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_loop_invariant_init</key>
            <name>loop invariant in first iteration</name>
            <description>Check that the loop invariant evaluates to True on the first iteration of the loop.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_loop_invariant_preserv</key>
            <name>loop invariant after first iteration</name>
            <description>Check that the loop invariant evaluates to True at each further iteration of the loop.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_loop_variant</key>
            <name>loop variant</name>
            <description>Check that the given loop variant decreases/increases as specified during each iteration of the loop. This implies termination of the loop.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_subprogram_variant</key>
            <name>subprogram variant</name>
            <description>Check that the given subprogram variant decreases/increases as specified during each recursive call. This implies there will be no infinite recursion.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_assert</key>
            <name>assertion</name>
            <description>Check that the given assertion evaluates to True.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_raise</key>
            <name>raised exception</name>
            <description>Check that the raise statement or expression can never be reached.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_inline_check</key>
            <name>Inline_For_Proof annotation</name>
            <description>Check that an Annotate pragma with the Inline_For_Proof identifier is correct.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_uc_source</key>
            <name>unchecked conversion source check</name>
            <description>Check that a source type in an unchecked conversion can safely be used for such conversions. This means that the memory occupied by objects of this type is fully used by the object.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_uc_target</key>
            <name>unchecked conversion target check</name>
            <description>Check that a target type in an unchecked conversion can safely be used for such conversions. This means that the memory occupied by objects of this type is fully used by the object, and no invalid bitpatterns occur.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_uc_same_size</key>
            <name>unchecked conversion size check</name>
            <description>Check that the two types in an unchecked conversion instance are of the same size.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_uc_alignment</key>
            <name>alignment check</name>
            <description>Check that the first object's alignment is an integral multiple of the second object's alignment.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>assertion</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_weaker_pre</key>
            <name>precondition weaker than class-wide precondition</name>
            <description>Check that the precondition aspect of the subprogram is weaker than its class-wide precondition.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>liskov-substitution-principle</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_trivial_weaker_pre</key>
            <name>precondition not True while class-wide precondition is True</name>
            <description>Check that the precondition aspect of the subprogram is True if its class-wide precondition is True.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>liskov-substitution-principle</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_stronger_post</key>
            <name>postcondition stronger than class-wide postcondition</name>
            <description>Check that the postcondition aspect of the subprogram is stronger than its class-wide postcondition.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>liskov-substitution-principle</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_weaker_classwide_pre</key>
            <name>class-wide precondition weaker than overridden one</name>
            <description>Check that the class-wide precondition aspect of the subprogram is weaker than its overridden class-wide precondition.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>liskov-substitution-principle</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_stronger_classwide_post</key>
            <name>class-wide postcondition stronger than overridden one</name>
            <description>Check that the class-wide postcondition aspect of the subprogram is stronger than its overridden class-wide postcondition.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>liskov-substitution-principle</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_weaker_pre_access</key>
            <name>precondition of the source weaker than precondition of the target</name>
            <description>Check that the precondition aspect of the access-to-subprogram type used as the target of a conversion implies the precondition of the source.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>liskov-substitution-principle</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_stronger_post_access</key>
            <name>postcondition of the source stronger than postcondition of the target</name>
            <description>Check that the postcondition aspect of the access-to-subprogram type used as the target of a conversion is implied by the postcondition of the source.</description>
            <type>BUG</type>
            <tag>spark2014</tag>
            <tag>liskov-substitution-principle</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_inconsistent_pre</key>
            <name>precondition always False</name>
            <description>Warn if precondition is found to be always False</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>proof-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_inconsistent_post</key>
            <name>postcondition always False</name>
            <description>Warn if postcondition is found to be always False</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>proof-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_inconsistent_assume</key>
            <name>pragma Assume always False</name>
            <description>Warn if pragma Assume is found to be always False</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>proof-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_unreachable_branch</key>
            <name>unreachable branch</name>
            <description>Warn if branch is found to be unreachable</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>proof-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
    <rule>
            <key>vc_dead_code</key>
            <name>unreachable code</name>
            <description>Warn if code is found to be unreachable</description>
            <type>CODE_SMELL</type>
            <tag>spark2014</tag>
            <tag>proof-warning</tag>
            <remediationFunction>CONSTANT_ISSUE</remediationFunction>
            <remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
    </rule>
</rules>
