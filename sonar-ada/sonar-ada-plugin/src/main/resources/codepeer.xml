<?xml version='1.0' encoding='UTF-8'?>
<rules>

    <rule>
            <key>precondition</key>
            <name>precondition</name>
            <description>a subprogram call that might violate the subprogram's precondition</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>postcondition</key>
            <name>postcondition</name>
            <description>the subprogram's body may violate its specified postcondition</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>user precondition</key>
            <name>user precondition</name>
            <description>a call might violate a user specified subprogram's precondition</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>validity check</key>
            <name>validity check</name>
            <description>possible read of uninitialized or invalid value (CWE 457)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>access check</key>
            <name>access check</name>
            <description>dereference of a possibly null reference (CWE 476)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>divide by zero</key>
            <name>divide by zero</name>
            <description>second operand of divide, mod or rem operation could be zero (CWE 369)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>aliasing check</key>
            <name>aliasing check</name>
            <description>aliasing between by-reference parameters</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>raise exception</key>
            <name>raise exception</name>
            <description>unconditional explicit raise</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>conditional check</key>
            <name>conditional check</name>
            <description>conditional explicit raise</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>array index check</key>
            <name>array index check</name>
            <description>index value could be outside the array bounds (CWE 120, 124, 125-127, 129-131)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>assertion</key>
            <name>assertion</name>
            <description>user assertion (pragma Assert or precondition) could fail</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>overflow check</key>
            <name>overflow check</name>
            <description>calculation may overflow the bounds of a numeric type (CWE 190-191)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>range check</key>
            <name>range check</name>
            <description>calculation may generate a value outside the bounds of the type (CWE 682)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>discriminant check</key>
            <name>discriminant check</name>
            <description>a field for the wrong variant/discriminant is accessed (CWE 136, 137)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>tag check</key>
            <name>tag check</name>
            <description>tag check (incorrect tag value on a tagged object) may fail (CWE 136, 137)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>check</tag>
            </rule>
    <rule>
            <key>call too complex</key>
            <name>call too complex</name>
            <description>subprogram skipped to avoid exhausting resources</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>subp not available</key>
            <name>subp not available</name>
            <description>subprogram not available, call not analyzed</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>dead code continues</key>
            <name>dead code continues</name>
            <description>continuation of dead code</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>module analyzed</key>
            <name>module analyzed</name>
            <description>module included in analysis</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>module not analyzed</key>
            <name>module not analyzed</name>
            <description>module not included due to CodePeer limitation</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>subp not analyzed</key>
            <name>subp not analyzed</name>
            <description>subprogram not included due to CodePeer limitation</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>subp incompletely analyzed</key>
            <name>subp incompletely analyzed</name>
            <description>incomplete analysis</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>suspicious precondition</key>
            <name>suspicious precondition</name>
            <description>computed precondition raises suspicion on procedure body</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>suspicious input</key>
            <name>suspicious input</name>
            <description>value reached through out-parameter before parameter isinitialized</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>suspicious constant operation</key>
            <name>suspicious constant operation</name>
            <description>constant computed from non-constant operands</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>unread parameter</key>
            <name>unread parameter</name>
            <description>an in out parameter of an elementary type is assigned before any reads</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>unassigned parameter</key>
            <name>unassigned parameter</name>
            <description>an in out parameter of a scalar type is never assigned</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>unused assignment</key>
            <name>unused assignment</name>
            <description>redundant assignent (CWE 563)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>unused out parameter</key>
            <name>unused out parameter</name>
            <description>actual parameter is ignored (CWE 563)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>unused assignment to global</key>
            <name>unused assignment to global</name>
            <description>useless assignment to global (CWE 563)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>useless self assignment</key>
            <name>useless self assignment</name>
            <description>assignment does not modify the value stored (CWE 563)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>dead code</key>
            <name>dead code</name>
            <description>unreachable code (CWE 561)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>loop does not complete normally</key>
            <name>loop does not complete normally</name>
            <description>loop does not complete normally (CWE 835)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>test predetermined</key>
            <name>test predetermined</name>
            <description>redundant conditionals (CWE 570, 571)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>test always true</key>
            <name>test always true</name>
            <description>test is always 'true' (CWE 571)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>test always false</key>
            <name>test always false</name>
            <description>test is always 'false' (CWE 572)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>condition predetermined</key>
            <name>condition predetermined</name>
            <description>redundant condition inside conditional (CWE 570, 571)</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>subp never returns</key>
            <name>subp never returns</name>
            <description>subprogram never returns</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>subp always fails</key>
            <name>subp always fails</name>
            <description>run-time problem is likely to occur on every execution of the subprogram</description>
            <type>CODE_SMELL</type>
            <tag>codepeer</tag>
            <tag>warning</tag>
            </rule>
    <rule>
            <key>unprotected access</key>
            <name>unprotected access</name>
            <description>a task type reads or writes a potentially shared object without holding a lock (CWE 362, 366, 820)</description>
            <type>BUG</type>
            <tag>codepeer</tag>
            <tag>race-condition</tag>
            </rule>
    <rule>
            <key>unprotected shared access</key>
            <name>unprotected shared access</name>
            <description>a task reads or writes a potentially shared object without holding a lock (CWE 362, 366, 820)</description>
            <type>BUG</type>
            <tag>codepeer</tag>
            <tag>race-condition</tag>
            </rule>
    <rule>
            <key>mismatched protected access</key>
            <name>mismatched protected access</name>
            <description>shared access protected by improper lock (CWE 362, 366, 820)</description>
            <type>BUG</type>
            <tag>codepeer</tag>
            <tag>race-condition</tag>
            </rule>
    <rule>
            <key>call too complex</key>
            <name>call too complex</name>
            <description>subprogram skipped to avoid exhausting resources</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
    <rule>
            <key>subp not available</key>
            <name>subp not available</name>
            <description>subprogram not available, call not analyzed</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
    <rule>
            <key>dead code continues</key>
            <name>dead code continues</name>
            <description>continuation of dead code</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
    <rule>
            <key>module analyzed</key>
            <name>module analyzed</name>
            <description>module included in analysis</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
    <rule>
            <key>module not analyzed</key>
            <name>module not analyzed</name>
            <description>module not included due to CodePeer limitation</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
    <rule>
            <key>subp not analyzed</key>
            <name>subp not analyzed</name>
            <description>subprogram not included due to CodePeer limitation</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
    <rule>
            <key>subp incompletely analyzed</key>
            <name>subp incompletely analyzed</name>
            <description>incomplete analysis</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
    <rule>
            <key>subp incompletely analyzed</key>
            <name>subp incompletely analyzed</name>
            <description>incomplete analysis</description>
            <tag>codepeer</tag>
            <tag>informational</tag>
            </rule>
</rules>
